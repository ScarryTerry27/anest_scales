import datetime
import io

import streamlit as st
from docx import Document

from backend.scales.ariscat import check_ariscat
from backend.scales.caprini import caprini_score_and_risk
from backend.scales.el_ganzouri import check_elganzouri
from backend.scales.index_lee import lee_score_and_risk
from backend.scales.soba_recomendation import is_high_soba_risk, stopbang_score, calculate_bmi


def show_button_down():
    col_prev, col_next = st.columns(2, gap="large", border=False)
    if st.session_state["stage"] and col_prev.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
        prev_router()


def next_router():
    st.session_state["stage"] = (st.session_state["stage"] + 1) % 7
    st.rerun()


def prev_router():
    st.session_state["stage"] = abs(st.session_state["stage"] + 7 - 1) % 7
    st.rerun()


def check_scales():
    caprini = caprini_score_and_risk(
        {k: v for k, v in st.session_state.patient_data.items() if "Caprini" in k}
    )
    elganzouri = check_elganzouri(
        {k: v for k, v in st.session_state.patient_data.items() if "ElGanzouri" in k}
    )
    lee = lee_score_and_risk(
        st.session_state.patient_data["LEE_–û–ø–µ—Ä–∞—Ü–∏—è"],
        st.session_state.patient_data["LEE_–ò–ë–°"],
        st.session_state.patient_data["LEE_–•–°–ù"],
        st.session_state.patient_data["LEE_–û–ù–ú–ö"],
        st.session_state.patient_data["LEE_–°–î"],
        st.session_state.patient_data["LEE_–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω"],
    )
    ariscat = check_ariscat(
        st.session_state.patient_data["–í–æ–∑—Ä–∞—Å—Ç"],
        st.session_state.patient_data["spo2"],
        st.session_state.patient_data["ARISCAT_–ò–Ω—Ñ–µ–∫—Ü–∏—è"] != "–ù–µ—Ç (0 –±–∞–ª–ª–æ–≤)",
        st.session_state.patient_data["ARISCAT_–ê–Ω–µ–º–∏—è"] != "–ù–µ—Ç (0 –±–∞–ª–ª–æ–≤)",
        st.session_state.patient_data["ARISCAT_–†–∞–∑—Ä–µ–∑"],
        st.session_state.patient_data["ARISCAT_–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
        st.session_state.patient_data["ARISCAT_–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è"] != "–ù–µ—Ç (0 –±–∞–ª–ª–æ–≤)",
    )
    bmi = calculate_bmi(
        st.session_state.patient_data["–†–æ—Å—Ç"],
        st.session_state.patient_data["–í–µ—Å"],
    )

    stopbang = stopbang_score(
        st.session_state.patient_data["STOPBANG_–•—Ä–∞–ø"],
        st.session_state.patient_data["STOPBANG_–°–æ–Ω–ª–∏–≤–æ—Å—Ç—å"],
        st.session_state.patient_data["STOPBANG_–ê–ø–Ω–æ—ç"],
        st.session_state.patient_data["STOPBANG_–î–∞–≤–ª–µ–Ω–∏–µ"],
        bmi,
        st.session_state.patient_data["–í–æ–∑—Ä–∞—Å—Ç"],
        st.session_state.patient_data["STOPBANG_–®–µ—è"]
    )
    soba = is_high_soba_risk(
        st.session_state.patient_data["SOBA_–§—É–Ω–∫—Ü–∏—è"],
        st.session_state.patient_data["SOBA_–≠–ö–ì"],
        st.session_state.patient_data["SOBA_–ê–ì"],
        st.session_state.patient_data["spo2"],
        st.session_state.patient_data["SOBA_CO2"],
        st.session_state.patient_data["SOBA_–¢–ì–í"],
        stopbang
    )
    st.session_state["scales"]["caprini"] = caprini
    st.session_state["scales"]["elganzouri"] = elganzouri
    st.session_state["scales"]["lee"] = lee
    st.session_state["scales"]["ariscat"] = ariscat
    st.session_state["scales"]["bmi"] = bmi
    st.session_state["scales"]["stopbang"] = stopbang
    st.session_state["scales"]["soba"] = soba


def show_scales():
    st.header("üßÆ –†–∞—Å—á—ë—Ç —à–∫–∞–ª")
    check_scales()
    with st.expander("üßæ –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ"):
        st.markdown(f"**–§–ò–û:** {st.session_state.patient_data.get('–§–ò–û', '‚Äî')}")
        st.markdown(f"**–í–æ–∑—Ä–∞—Å—Ç:** {st.session_state.patient_data.get('–í–æ–∑—Ä–∞—Å—Ç', '‚Äî')} –ª–µ—Ç")
        st.markdown(f"**–ü–æ–ª:** {st.session_state.patient_data.get('–ü–æ–ª', '‚Äî')}")
        st.markdown(f"**–†–æ—Å—Ç:** {st.session_state.patient_data.get('–†–æ—Å—Ç', '‚Äî')} —Å–º")
        st.markdown(f"**–í–µ—Å:** {st.session_state.patient_data.get('–í–µ—Å', '‚Äî')} –∫–≥")

    with st.expander("ü©∏ –®–∫–∞–ª–∞ **Caprini** (–≤–µ–Ω–æ–∑–Ω—ã–µ —Ç—Ä–æ–º–±–æ–∑—ã)"):
        score, risk = st.session_state.scales["caprini"]
        st.metric(label="–°—É–º–º–∞ –±–∞–ª–ª–æ–≤", value=score)
        st.markdown(f"**–†–∏—Å–∫:** {risk}")

    with st.expander("ü´Å –®–∫–∞–ª–∞ **El-Ganzouri** (–∏–Ω—Ç—É–±–∞—Ü–∏—è)"):
        score, risk = st.session_state.scales["elganzouri"]
        st.metric(label="–°—É–º–º–∞ –±–∞–ª–ª–æ–≤", value=score)
        st.markdown(f"**–†–∏—Å–∫ —Å–ª–æ–∂–Ω–æ–π –∏–Ω—Ç—É–±–∞—Ü–∏–∏:** {risk}")

    with st.expander("‚ù§Ô∏è –®–∫–∞–ª–∞ **Lee** (—Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è)"):
        score, risk = st.session_state.scales["lee"]
        st.metric(label="–°—É–º–º–∞ –±–∞–ª–ª–æ–≤", value=score)
        st.markdown(f"**–†–∏—Å–∫:** {risk}")

    with st.expander("ü´Å –®–∫–∞–ª–∞ **ARISCAT** (—Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è)"):
        score, risk = st.session_state.scales["ariscat"]
        st.metric(label="–°—É–º–º–∞ –±–∞–ª–ª–æ–≤", value=score)
        st.markdown(f"**–†–∏—Å–∫:** {risk}")

    with st.expander("‚öñÔ∏è –ò–Ω–¥–µ–∫—Å **–ò–ú–¢** (BMI)"):
        st.metric(label="–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞", value=round(st.session_state.scales["bmi"], 2))

    with st.expander("üò¥ –®–∫–∞–ª–∞ **STOPBANG**"):
        score = st.session_state.scales["stopbang"]
        st.metric(label="–°—É–º–º–∞ –±–∞–ª–ª–æ–≤", value=score)

    with st.expander("üí• –®–∫–∞–ª–∞ **SOBA**"):
        result = st.session_state.scales["soba"]
        st.markdown("**–†–∏—Å–∫ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π:** " + ("–í—ã—Å–æ–∫–∏–π" if result else "–ù–∏–∑–∫–∏–π"))

    load_docx()


def load_docx():
    patient = st.session_state.patient_data
    scales = st.session_state.scales

    document = Document()
    document.add_heading('üßæ –û—Ç—á—ë—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É', level=1)

    document.add_paragraph(f'–î–∞—Ç–∞: {datetime.datetime.now().strftime("%d.%m.%Y %H:%M")}')
    document.add_paragraph('')

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    document.add_heading('üîπ –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è', level=2)
    info_fields = {
        "–§–ò–û": patient.get("–§–ò–û", "‚Äî"),
        "–í–æ–∑—Ä–∞—Å—Ç": f"{patient.get('–í–æ–∑—Ä–∞—Å—Ç', '‚Äî')} –ª–µ—Ç",
        "–ü–æ–ª": patient.get("–ü–æ–ª", "‚Äî"),
        "–†–æ—Å—Ç": f"{patient.get('–†–æ—Å—Ç', '‚Äî')} —Å–º",
        "–í–µ—Å": f"{patient.get('–í–µ—Å', '‚Äî')} –∫–≥",
        "–°–∞—Ç—É—Ä–∞—Ü–∏—è (SpO‚ÇÇ)": f"{patient.get('spo2', '‚Äî')} %"
    }
    for k, v in info_fields.items():
        document.add_paragraph(f"{k}: {v}")

    # –®–∫–∞–ª—ã
    document.add_heading('üìä –û—Ü–µ–Ω–æ—á–Ω—ã–µ —à–∫–∞–ª—ã', level=2)

    def add_scale(doc, name, value):
        if isinstance(value, tuple):
            score, risk = value
            doc.add_paragraph(f"{name}: {score} ‚Äî —Ä–∏—Å–∫: {risk}")
        elif isinstance(value, bool):
            doc.add_paragraph(f"{name}: {'–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫' if value else '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫'}")
        else:
            doc.add_paragraph(f"{name}: {value}")

    add_scale(document, "Caprini", scales.get("caprini"))
    add_scale(document, "El-Ganzouri", scales.get("elganzouri"))
    add_scale(document, "Lee", scales.get("lee"))
    add_scale(document, "ARISCAT", scales.get("ariscat"))
    add_scale(document, "–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (BMI)", round(scales.get("bmi", 0), 2))
    add_scale(document, "STOP-BANG", scales.get("stopbang"))
    add_scale(document, "SOBA", scales.get("soba"))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ BytesIO
    file_stream = io.BytesIO()
    document.save(file_stream)
    file_stream.seek(0)

    st.download_button(
        label="üìÑ –°–∫–∞—á–∞—Ç—å DOCX-–æ—Ç—á—ë—Ç",
        data=file_stream,
        file_name=f"–û—Ç—á–µ—Ç_{patient.get('–§–ò–û', '–ø–∞—Ü–∏–µ–Ω—Ç')}.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

    show_button_down()
